@using Manero.ViewModels
@model Manero.ViewModels.PaymentMethodViewModel

@{
    ViewData["Title"] = "Payment methods";

    var currentUser = new PaymentMethodViewModel()
    {
        PaymentMethodCard = true,
        CardType = "fa-cc-visa",
        CardHolderName = "Kristin Watson",
        CardNumber = "7741 6588 2123 6644",
        CardExpirationDate = "07/27",

        PaymentMethodApplePay = true,
        PaymentMethodPayPal = true,
        PaymentMethodPayoneer = false,
    };
}

<head>
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
</head>

<section class="payment-header container">
    <div class="navigation-header">
        <a asp-controller="UserProfile" asp-action="Index"><i class="fa-solid fa-chevron-left"></i></a>
        <h5>@ViewData["Title"]</h5>
        <div></div>
    </div>
</section>

<section class="saved-cards container">
    <div class="d-flex justify-content-between">
        <div>Cards</div>
        <a class="add-card" asp-controller="UserProfile" asp-action="UserPaymentMethodAdd">Add a new card<i class="fa-light fa-plus ms-4"></i></a>
    </div>

    <div class="slider">


        <partial name="/Views/Partials/PaymentMethodPartials/_PaymentCard.cshtml" model="currentUser" />
        <partial name="/Views/Partials/PaymentMethodPartials/_PaymentCard.cshtml" model="currentUser" />
        <partial name="/Views/Partials/PaymentMethodPartials/_PaymentCard.cshtml" model="currentUser" />


    </div>
</section>

<section class="payment-methods container">

        <div class="d-flex justify-content-between">
        @if (currentUser.PaymentMethodApplePay == true)
        {
            <p class="_name">Apple Pay<i class="fa-solid fa-check ms-3"></i></p>
            <a href="" class="edit-or-add"><i class="fa-light fa-pen-to-square"></i></a>
        } else {
            <p class="_name">Apple Pay</p>
            <a href="" class="edit-or-add"><i class="fa-light fa-plus ms-4"></i></a>
        }
        </div>

        <div class="d-flex justify-content-between">
        @if (currentUser.PaymentMethodPayPal == true)
        {
            <p class="_name">Pay Pal<i class="fa-solid fa-check ms-3"></i></p>
            <a href="" class="edit-or-add"><i class="fa-light fa-pen-to-square"></i></a>
        }
        else {
            <p class="_name">Pay Pal</p>
            <a href="" class="edit-or-add"><i class="fa-light fa-plus ms-4"></i></a>
        }
        </div>
        <div class="d-flex justify-content-between">
        @if (currentUser.PaymentMethodPayoneer == true)
        {
            <p class="_name">Payoneer<i class="fa-solid fa-check ms-3"></i></p>
            <a href="" class="edit-or-add"><i class="fa-light fa-pen-to-square"></i></a>
        }
        else {
            <p class="_name">Payoneer</p>
            <a href="" class="edit-or-add"><i class="fa-light fa-plus ms-4"></i></a>
        }
        </div>
</section>

<script>
    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#111111', controlSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromSlider.value = from;
        }
    }

    function controlToInput(toSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#111111', controlSlider);
        setToggleAccessible(toInput);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
        } else {
            toInput.value = from;
        }
    }

    function controlFromSlider(fromSlider, toSlider, fromInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#111111', toSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromInput.value = from;
        }
    }

    function controlToSlider(fromSlider, toSlider, toInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#111111', toSlider);
        setToggleAccessible(toSlider);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
        } else {
            toInput.value = from;
            toSlider.value = from;
        }
    }

    function getParsed(currentFrom, currentTo) {
        const from = parseInt(currentFrom.value, 10);
        const to = parseInt(currentTo.value, 10);
        return [from, to];
    }

    function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
        const rangeDistance = to.max - to.min;
        const fromPosition = from.value - to.min;
        const toPosition = to.value - to.min;
        controlSlider.style.background = `linear-gradient(
              to right,
              ${sliderColor} 0%,
              ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
              ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
              ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
              ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
              ${sliderColor} 100%)`;
    }

    function setToggleAccessible(currentTarget) {
        const toSlider = document.querySelector('#toSlider');
        if (Number(currentTarget.value) <= 0) {
            toSlider.style.zIndex = 2;
        } else {
            toSlider.style.zIndex = 0;
        }
    }

    const fromSlider = document.querySelector('#fromSlider');
    const toSlider = document.querySelector('#toSlider');
    const fromInput = document.querySelector('#fromInput');
    const toInput = document.querySelector('#toInput');
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#111111', toSlider);
    setToggleAccessible(toSlider);

    fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
    toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
    fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
    toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);

</script>