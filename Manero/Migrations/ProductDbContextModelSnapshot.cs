// <auto-generated />
using System;
using Manero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manero.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Manero.Models.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Manero.Models.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Pants"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Accessories"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "T-shirts"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Dresses"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Hoodie"
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.PaymentCardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVVCode")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("Manero.Models.Entities.ProductCategoryEntity", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 6
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SalePrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Handgjort ansiktsskägg är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://media.discordapp.net/attachments/1161545688103006245/1171425219949371442/tactical-beard-brown.png?ex=655ca1c0&is=654a2cc0&hm=44c37be70087bceccb4e1e8b29418f640271e6e32984398ca58d349ba8aeb131&=&width=337&height=368",
                            Price = 399,
                            ProductName = "Skägg deluxe",
                            Rating = 3,
                            SalePrice = 300
                        },
                        new
                        {
                            Id = 2,
                            Description = "Handgjort vit klänning är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/291759/pexels-photo-291759.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 699,
                            ProductName = "Vit klänning",
                            Rating = 2,
                            SalePrice = 500
                        },
                        new
                        {
                            Id = 3,
                            Description = "Handgjort vit hoodie är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/981091/pexels-photo-981091.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Grön Hoodie",
                            Rating = 4,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 4,
                            Description = "Handgjort brun hoodie är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/704857/pexels-photo-704857.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Brun Hoodie",
                            Rating = 5,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 5,
                            Description = "Handgjort svart hoodie är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/744480/pexels-photo-744480.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Svart Hoodie",
                            Rating = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Handgjort Grön klänning är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/985635/pexels-photo-985635.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Grön klänning",
                            Rating = 4,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 7,
                            Description = "Handgjort svarta skor är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/5214139/pexels-photo-5214139.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Svarta skor",
                            Rating = 3,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 8,
                            Description = "Handgjort vita skor är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/5730956/pexels-photo-5730956.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Vita skor",
                            Rating = 2,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 9,
                            Description = "Handgjort Gula skor är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/2529157/pexels-photo-2529157.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Gula skor",
                            Rating = 5,
                            SalePrice = 200
                        },
                        new
                        {
                            Id = 10,
                            Description = "Handgjort Bruna skor är lämplig för utomhusaktiviteter, överlevnad, alla typer jakt och fiske, så rolig och fantastisk. Dra åt snabbt, lossa eller ta bort skägget med knappfästen, så att ditt ansikte alltid blir varmt och skyddat.",
                            ImageUrl = "https://images.pexels.com/photos/2562992/pexels-photo-2562992.png?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Price = 299,
                            ProductName = "Bruna skor",
                            Rating = 3,
                            SalePrice = 200
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.ProductReviewEntity", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ProductReviews");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ReviewId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            ReviewId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            ReviewId = 7
                        },
                        new
                        {
                            ProductId = 1,
                            ReviewId = 10
                        },
                        new
                        {
                            ProductId = 1,
                            ReviewId = 9
                        },
                        new
                        {
                            ProductId = 2,
                            ReviewId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            ReviewId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            ReviewId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            ReviewId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            ReviewId = 6
                        },
                        new
                        {
                            ProductId = 5,
                            ReviewId = 7
                        },
                        new
                        {
                            ProductId = 6,
                            ReviewId = 8
                        },
                        new
                        {
                            ProductId = 7,
                            ReviewId = 10
                        },
                        new
                        {
                            ProductId = 8,
                            ReviewId = 9
                        },
                        new
                        {
                            ProductId = 9,
                            ReviewId = 10
                        },
                        new
                        {
                            ProductId = 10,
                            ReviewId = 2
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.PromoCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 50,
                            ExpirationDate = "June 1, 2024",
                            ImageUrl = "/static-images/placeholder_promocode.svg",
                            Title = "Acme Co."
                        },
                        new
                        {
                            Id = 2,
                            Discount = 30,
                            ExpirationDate = "May 1, 2022",
                            ImageUrl = "/static-images/placeholder_promocode.svg",
                            Title = "Barone LLC."
                        },
                        new
                        {
                            Id = 3,
                            Discount = 15,
                            ExpirationDate = "June 30, 2022",
                            ImageUrl = "/static-images/placeholder_promocode.svg",
                            Title = "Abstergo Ltd."
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentText = "Excellent.I highly recommend this business",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5691)
                        },
                        new
                        {
                            Id = 2,
                            CommentText = "Nice,I was completely impressed with their professionalism and customer service",
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5741)
                        },
                        new
                        {
                            Id = 3,
                            CommentText = "Thanks so much, I am very happy with my purchase",
                            Rating = 3,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5744)
                        },
                        new
                        {
                            Id = 4,
                            CommentText = "Not bad, It could have been of better quality",
                            Rating = 2,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5746)
                        },
                        new
                        {
                            Id = 5,
                            CommentText = "Eexellent, It has good quality",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5748)
                        },
                        new
                        {
                            Id = 6,
                            CommentText = "That was OK",
                            Rating = 3,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5750)
                        },
                        new
                        {
                            Id = 7,
                            CommentText = "Very good, and good quality",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5752)
                        },
                        new
                        {
                            Id = 8,
                            CommentText = "Vey Bad, I am not satisfied at all",
                            Rating = 1,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5754)
                        },
                        new
                        {
                            Id = 9,
                            CommentText = "Eexellent .Thanks so much, I am very happy with my purchase",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5756)
                        },
                        new
                        {
                            Id = 10,
                            CommentText = "Nice ,I am very happy",
                            Rating = 3,
                            ReviewDate = new DateTime(2023, 11, 15, 13, 48, 9, 604, DateTimeKind.Local).AddTicks(5758)
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.UserAddressEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Manero.Models.Entities.UserPaymentCardEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PaymentCardId");

                    b.HasIndex("PaymentCardId");

                    b.ToTable("UserPaymentCards");
                });

            modelBuilder.Entity("Manero.Models.Entities.UserPromoCodeEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PromoCodeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PromoCodeId");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("UserPromoCodes");

                    b.HasData(
                        new
                        {
                            UserId = "5ebe6c4c-409c-47fe-bed4-df34cdbd3a8a",
                            PromoCodeId = 1
                        },
                        new
                        {
                            UserId = "a106762b-162f-4e96-9c50-8f6b80298fd1",
                            PromoCodeId = 2
                        },
                        new
                        {
                            UserId = "a106762b-162f-4e96-9c50-8f6b80298fd1",
                            PromoCodeId = 3
                        });
                });

            modelBuilder.Entity("Manero.Models.Entities.ProductCategoryEntity", b =>
                {
                    b.HasOne("Manero.Models.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manero.Models.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manero.Models.Entities.ProductReviewEntity", b =>
                {
                    b.HasOne("Manero.Models.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manero.Models.Entities.ReviewEntity", "Review")
                        .WithMany("ProductReviws")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Manero.Models.Entities.UserAddressEntity", b =>
                {
                    b.HasOne("Manero.Models.Entities.AddressEntity", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Manero.Models.Entities.UserPaymentCardEntity", b =>
                {
                    b.HasOne("Manero.Models.Entities.PaymentCardEntity", "PaymentCard")
                        .WithMany()
                        .HasForeignKey("PaymentCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCard");
                });

            modelBuilder.Entity("Manero.Models.Entities.UserPromoCodeEntity", b =>
                {
                    b.HasOne("Manero.Models.Entities.PromoCodeEntity", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("Manero.Models.Entities.AddressEntity", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Manero.Models.Entities.ReviewEntity", b =>
                {
                    b.Navigation("ProductReviws");
                });
#pragma warning restore 612, 618
        }
    }
}
